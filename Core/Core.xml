<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="T:Core.DTOs.Items.ItemMetadataRequest">
            <summary>
            Request model for updating item metadata in external system (SAP Business One)
            Contains flexible metadata fields - external system validates field names and permissions
            </summary>
        </member>
        <member name="P:Core.DTOs.Items.ItemMetadataRequest.Metadata">
            <summary>
            Metadata field values as key-value pairs
            External system (SAP) will validate field names and read-only restrictions
            </summary>
        </member>
        <member name="T:Core.DTOs.Items.ItemMetadataResponse">
            <summary>
            Response model containing complete item metadata from external system (SAP Business One)
            Contains flexible metadata fields - external system determines available fields
            </summary>
        </member>
        <member name="P:Core.DTOs.Items.ItemMetadataResponse.Metadata">
            <summary>
            All metadata field values as key-value pairs
            External system (SAP) determines which fields are available and their values
            </summary>
        </member>
        <member name="T:Core.DTOs.Items.UpdateItemMetadataRequest">
            <summary>
            Request model for updating item metadata fields via API
            Only writable fields should be included in the metadata dictionary
            </summary>
        </member>
        <member name="P:Core.DTOs.Items.UpdateItemMetadataRequest.Metadata">
            <summary>
            Metadata field values as key-value pairs
            Key must match configured metadata definition ID (writable fields only)
            Value must be compatible with configured field type
            Read-only fields (ItemCode, ItemName) will be rejected if included
            </summary>
        </member>
        <member name="P:Core.DTOs.Package.PackageDto.PickListPackageId">
            <summary>
            When a package is generated for a specific pick list we return the pick list package tag id
            </summary>
        </member>
        <member name="T:Core.DTOs.Package.UpdatePackageMetadataRequest">
            <summary>
            Request model for updating package metadata fields
            </summary>
        </member>
        <member name="P:Core.DTOs.Package.UpdatePackageMetadataRequest.Metadata">
            <summary>
            Metadata field values as key-value pairs
            Key must match configured metadata definition ID
            Value must be compatible with configured field type
            </summary>
        </member>
        <member name="T:Core.DTOs.PickList.FollowUpDocumentInfo">
            <summary>
            Information about a follow-up document created from a pick list
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentInfo.PickEntry">
            <summary>
            The pick list source entry
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentInfo.DocumentType">
            <summary>
            The type of document (e.g., 15 = Delivery, 16 = Return)
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentInfo.DocumentEntry">
            <summary>
            The document entry number
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentInfo.DocumentNumber">
            <summary>
            The document number (visible number)
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentInfo.DocumentDate">
            <summary>
            Date when the document was created
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentInfo.Items">
            <summary>
            List of items and quantities that were actually delivered/processed
            </summary>
        </member>
        <member name="T:Core.DTOs.PickList.FollowUpDocumentItem">
            <summary>
            Item details from a follow-up document
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentItem.ItemCode">
            <summary>
            The item code
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentItem.Quantity">
            <summary>
            The quantity that was actually delivered/processed
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.FollowUpDocumentItem.BinEntry">
            <summary>
            The bin location from which the item was picked
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListAddPackageRequest.ID">
            <summary>
            The pick list absolute entry (PickList.AbsEntry)
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListAddPackageRequest.Type">
            <summary>
            The document type (e.g., Sales Order = 17, Invoice = 13)
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListAddPackageRequest.Entry">
            <summary>
            The document entry number
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListAddPackageRequest.PackageId">
            <summary>
            The package ID to add to the pick list
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListAddPackageRequest.BinEntry">
            <summary>
            Optional bin entry where the package is located
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListAddPackageRequest.PickingPackageId">
            <summary>
            Optional add package into a new picking package
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListAutoPickRequest.TargetPackageId">
            <summary>
            Optional target package ID. If not provided, a new package will be created.
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListAutoPickRequest.TargetBinEntry">
            <summary>
            Target bin location for the picked items
            </summary>
        </member>
        <member name="T:Core.DTOs.PickList.PickListClosureInfo">
            <summary>
            Contains information about why a pick list was closed in the external system
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListClosureInfo.IsClosed">
            <summary>
            Whether the pick list is closed in the external system
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListClosureInfo.ClosureReason">
            <summary>
            The reason for closure (e.g., "Manual", "FollowUpDocument", "Cancelled")
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListClosureInfo.FollowUpDocuments">
            <summary>
            List of follow-up documents created from this pick list
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListClosureInfo.RequiresPackageMovement">
            <summary>
            Indicates if package movements should be processed
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListPackageResponse.Status">
            <summary>
            The response status
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListPackageResponse.ErrorMessage">
            <summary>
            Error message if the operation failed
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListPackageResponse.PickListIds">
            <summary>
            The IDs of the created pick list entries
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListPackageResponse.PackageId">
            <summary>
            The package ID that was processed
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListPackageResponse.PackageContents">
            <summary>
            The contents of the package that were added
            </summary>
        </member>
        <member name="P:Core.DTOs.PickList.PickListPackageResponse.OkResponse">
            <summary>
            Creates a successful response with no additional data
            </summary>
        </member>
        <member name="M:Core.DTOs.PickList.PickListPackageResponse.ErrorResponse(System.String)">
            <summary>
            Creates an error response with the specified message
            </summary>
        </member>
        <member name="P:Core.Entities.PackageCommitment.TargetPackageId">
            <summary>
            When creating a new package we need to track the source commited data to which new package it's going too
            </summary>
        </member>
        <member name="P:Core.Entities.PickListPackage.ProcessedAt">
            <summary>
            Timestamp when this package was processed for pick list closure
            Null means it hasn't been processed yet
            </summary>
        </member>
        <member name="T:Core.Enums.CommandDestinationType">
            <summary>
            Defines the type of destination for external command file delivery
            </summary>
        </member>
        <member name="F:Core.Enums.CommandDestinationType.LocalPath">
            <summary>
            Local file system path
            </summary>
        </member>
        <member name="F:Core.Enums.CommandDestinationType.NetworkPath">
            <summary>
            Network share path (UNC path)
            </summary>
        </member>
        <member name="F:Core.Enums.CommandDestinationType.FTP">
            <summary>
            FTP server
            </summary>
        </member>
        <member name="F:Core.Enums.CommandDestinationType.SFTP">
            <summary>
            SFTP (SSH File Transfer Protocol) server
            </summary>
        </member>
        <member name="T:Core.Enums.CommandFileFormat">
            <summary>
            Defines the file format for external command output
            </summary>
        </member>
        <member name="F:Core.Enums.CommandFileFormat.XML">
            <summary>
            XML format
            </summary>
        </member>
        <member name="F:Core.Enums.CommandFileFormat.JSON">
            <summary>
            JSON format
            </summary>
        </member>
        <member name="T:Core.Enums.CommandQueryResultType">
            <summary>
            Defines the expected result type of a command query
            </summary>
        </member>
        <member name="F:Core.Enums.CommandQueryResultType.Single">
            <summary>
            Query returns a single row
            </summary>
        </member>
        <member name="F:Core.Enums.CommandQueryResultType.Multiple">
            <summary>
            Query returns multiple rows
            </summary>
        </member>
        <member name="T:Core.Enums.CommandTriggerType">
            <summary>
            Defines when an external command should be triggered
            </summary>
        </member>
        <member name="F:Core.Enums.CommandTriggerType.CreatePackage">
            <summary>
            Triggered when a package is created
            </summary>
        </member>
        <member name="F:Core.Enums.CommandTriggerType.ActivatePackage">
            <summary>
            Trigger when a package is activated
            </summary>
        </member>
        <member name="F:Core.Enums.CommandTriggerType.ClosePackage">
            <summary>
            Triggered when a package is closed
            </summary>
        </member>
        <member name="F:Core.Enums.CommandTriggerType.Manual">
            <summary>
            Manually triggered by user action
            </summary>
        </member>
        <member name="M:Core.Interfaces.IExternalSystemAdapter.GetItemMetadataAsync(System.String)">
            <summary>
            Retrieves item metadata from the external system by item code
            </summary>
            <param name="itemCode">The item code to retrieve metadata for</param>
            <returns>Item metadata response with all configured fields, or null if item not found</returns>
        </member>
        <member name="M:Core.Interfaces.IExternalSystemAdapter.UpdateItemMetadataAsync(System.String,Core.DTOs.Items.ItemMetadataRequest)">
            <summary>
            Updates item metadata in the external system
            </summary>
            <param name="itemCode">The item code to update</param>
            <param name="request">The metadata update request containing writable field values</param>
            <returns>Updated item metadata response</returns>
        </member>
        <member name="T:Core.Interfaces.IItemService">
            <summary>
            Service interface for item metadata operations
            Provides abstraction layer over external system adapter for item metadata management
            </summary>
        </member>
        <member name="M:Core.Interfaces.IItemService.UpdateItemMetadataAsync(System.String,Core.DTOs.Items.UpdateItemMetadataRequest,Core.Models.SessionInfo)">
            <summary>
            Updates metadata for a specific item via external adapter
            </summary>
            <param name="itemCode">The item code to update</param>
            <param name="request">The metadata update request containing field values</param>
            <param name="sessionInfo">Current user session information</param>
            <returns>Updated item metadata response</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the item is not found in the external system</exception>
            <exception cref="!:ValidationException">Thrown when validation fails (read-only fields, mandatory fields, etc.)</exception>
            <exception cref="T:System.UnauthorizedAccessException">Thrown when user lacks permission to update item metadata</exception>
        </member>
        <member name="M:Core.Interfaces.IItemService.GetItemMetadataAsync(System.String)">
            <summary>
            Retrieves metadata for a specific item via external adapter
            </summary>
            <param name="itemCode">The item code to retrieve metadata for</param>
            <returns>Item metadata response or null if not found</returns>  
        </member>
        <member name="P:Core.Models.Settings.BackgroundPickListSyncOptions.CheckClosedPickLists">
            <summary>
            Whether to check for closed pick lists during sync
            </summary>
        </member>
        <member name="P:Core.Models.Settings.BackgroundPickListSyncOptions.ProcessPackageMovements">
            <summary>
            Whether to process package movements when pick lists are closed with follow-up documents
            </summary>
        </member>
        <member name="T:Core.Models.Settings.CommandDestination">
            <summary>
            Defines the destination configuration for external command file delivery
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.Type">
            <summary>
            Type of destination
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.Path">
            <summary>
            Path, URL, or host depending on destination type
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.Host">
            <summary>
            Host for FTP/SFTP connections
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.Port">
            <summary>
            Port for FTP/SFTP connections
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.Username">
            <summary>
            Username for authentication
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.Password">
            <summary>
            Password for authentication (should be encrypted)
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.UseNetworkImpersonation">
            <summary>
            Whether to use network impersonation for NetworkPath destinations
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.UsePassiveMode">
            <summary>
            Use passive mode for FTP connections
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.UseSsl">
            <summary>
            Use SSL/TLS for FTP connections
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.PrivateKeyPath">
            <summary>
            Private key file path for SFTP connections
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.PrivateKeyPassphrase">
            <summary>
            Private key passphrase for SFTP connections
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandDestination.HostFingerprint">
            <summary>
            Host fingerprint for SFTP connections (for security verification)
            </summary>
        </member>
        <member name="T:Core.Models.Settings.CommandQuery">
            <summary>
            Defines a query to be executed as part of an external command
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandQuery.Name">
            <summary>
            Name of the query for identification
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandQuery.Query">
            <summary>
            SQL query to execute
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandQuery.ResultType">
            <summary>
            Expected result type (Single row or Multiple rows)
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandQuery.IsBatchQuery">
            <summary>
            Indicates if this query supports batch execution with multiple IDs
            </summary>
        </member>
        <member name="T:Core.Models.Settings.CommandUIConfiguration">
            <summary>
            Defines UI configuration for manual external commands
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandUIConfiguration.AllowedScreens">
            <summary>
            List of screens where this command can be triggered
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandUIConfiguration.ButtonText">
            <summary>
            Text to display on the trigger button
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandUIConfiguration.RequireConfirmation">
            <summary>
            Whether to require user confirmation before execution
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandUIConfiguration.ConfirmationMessage">
            <summary>
            Confirmation message to display (supports placeholders like {count})
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandUIConfiguration.MaxBatchSize">
            <summary>
            Maximum number of items that can be processed in batch
            </summary>
        </member>
        <member name="T:Core.Models.Settings.ExternalCommand">
            <summary>
            Defines an external command configuration
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.Id">
            <summary>
            Unique identifier for the command
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.Name">
            <summary>
            Human-readable name for the command
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.Description">
            <summary>
            Description of what the command does
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.ObjectType">
            <summary>
            The object type this command applies to
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.TriggerType">
            <summary>
            When this command should be triggered
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.Enabled">
            <summary>
            Whether this command is enabled
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.AllowBatchExecution">
            <summary>
            Whether this command supports batch execution for multiple items
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.Queries">
            <summary>
            Queries to execute to gather data
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.FileFormat">
            <summary>
            File format for the generated output
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.FileNamePattern">
            <summary>
            Pattern for generating file names (supports placeholders like {Barcode}, {Timestamp})
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.Destination">
            <summary>
            Destination configuration for file delivery
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommand.UIConfiguration">
            <summary>
            UI configuration for manual commands
            </summary>
        </member>
        <member name="T:Core.Models.Settings.ExternalCommandsGlobalSettings">
            <summary>
            Global settings for external commands system
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommandsGlobalSettings.MaxConcurrentExecutions">
            <summary>
            Maximum number of commands that can execute concurrently
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommandsGlobalSettings.CommandTimeout">
            <summary>
            Command execution timeout in seconds
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommandsGlobalSettings.RetryPolicy">
            <summary>
            Retry policy configuration
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommandsGlobalSettings.FileEncoding">
            <summary>
            File encoding for generated files
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommandsGlobalSettings.XmlSettings">
            <summary>
            XML-specific settings
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommandsGlobalSettings.JsonSettings">
            <summary>
            JSON-specific settings
            </summary>
        </member>
        <member name="T:Core.Models.Settings.CommandRetryPolicy">
            <summary>
            Retry policy configuration for command execution
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandRetryPolicy.MaxRetries">
            <summary>
            Maximum number of retry attempts
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandRetryPolicy.RetryDelaySeconds">
            <summary>
            Delay between retry attempts in seconds
            </summary>
        </member>
        <member name="P:Core.Models.Settings.CommandRetryPolicy.RetryOnErrors">
            <summary>
            Error types that should trigger retries
            </summary>
        </member>
        <member name="T:Core.Models.Settings.XmlSettings">
            <summary>
            XML formatting settings
            </summary>
        </member>
        <member name="P:Core.Models.Settings.XmlSettings.RootElementName">
            <summary>
            Root element name for XML documents
            </summary>
        </member>
        <member name="P:Core.Models.Settings.XmlSettings.IncludeXmlDeclaration">
            <summary>
            Whether to include XML declaration
            </summary>
        </member>
        <member name="P:Core.Models.Settings.XmlSettings.IndentXml">
            <summary>
            Whether to indent XML for readability
            </summary>
        </member>
        <member name="T:Core.Models.Settings.JsonSettings">
            <summary>
            JSON formatting settings
            </summary>
        </member>
        <member name="P:Core.Models.Settings.JsonSettings.IndentJson">
            <summary>
            Whether to indent JSON for readability
            </summary>
        </member>
        <member name="P:Core.Models.Settings.JsonSettings.CamelCasePropertyNames">
            <summary>
            Whether to use camelCase for property names
            </summary>
        </member>
        <member name="P:Core.Models.Settings.JsonSettings.DateFormat">
            <summary>
            Date format string for JSON serialization
            </summary>
        </member>
        <member name="T:Core.Models.Settings.ExternalCommandsSettings">
            <summary>
            Settings for external commands system
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommandsSettings.Commands">
            <summary>
            List of configured external commands
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ExternalCommandsSettings.GlobalSettings">
            <summary>
            Global settings for the external commands system
            </summary>
        </member>
        <member name="T:Core.Models.Settings.ItemMetadataDefinition">
            <summary>
            Defines a custom metadata field that can be configured for items loaded from external systems
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ItemMetadataDefinition.Id">
            <summary>
            Unique identifier for the metadata field (e.g., "ItemCode", "PurchaseUnitVolume", "U_B1SStdTP")
            Must match one of the supported item fields exactly
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ItemMetadataDefinition.Description">
            <summary>
            Human-readable description/label for the field
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ItemMetadataDefinition.Type">
            <summary>
            Data type for validation and UI rendering
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ItemMetadataDefinition.Required">
            <summary>
            Whether this field is required when updating item metadata
            Cannot be true for read-only fields
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ItemMetadataDefinition.ReadOnly">
            <summary>
            Whether this field is read-only (loaded from external system, cannot be modified)
            ItemCode and ItemName are always read-only
            </summary>
        </member>
        <member name="P:Core.Models.Settings.ItemSettings.MetadataDefinition">
            <summary>
            Configurable metadata field definitions for items loaded from external systems
            External system (SAP) will validate field names and read-only restrictions
            </summary>
        </member>
        <member name="M:Core.Models.Settings.ItemSettings.ValidateMetadataDefinitions">
            <summary>
            Validates the metadata definitions for basic consistency
            Field-specific validation (valid names, read-only restrictions) is handled by external system
            </summary>
            <returns>List of validation error messages, empty if valid</returns>
        </member>
        <member name="P:Core.Models.Settings.Options.IdleLogoutTimeout">
            <summary>
            Idle Settings for auto log out, if null or zero, ignore
            </summary>
        </member>
        <member name="T:Core.Models.Settings.PackageMetadataDefinition">
            <summary>
            Defines a custom metadata field that can be configured for packages
            </summary>
        </member>
        <member name="P:Core.Models.Settings.PackageMetadataDefinition.Id">
            <summary>
            Unique identifier for the metadata field (e.g., "Volume", "Weight", "Note")
            </summary>
        </member>
        <member name="P:Core.Models.Settings.PackageMetadataDefinition.Description">
            <summary>
            Human-readable description/label for the field
            </summary>
        </member>
        <member name="P:Core.Models.Settings.PackageMetadataDefinition.Type">
            <summary>
            Data type for validation and UI rendering
            </summary>
        </member>
        <member name="T:Core.Models.Settings.MetadataFieldType">
            <summary>
            Supported data types for metadata fields
            </summary>
        </member>
        <member name="F:Core.Models.Settings.MetadataFieldType.String">
            <summary>
            Text/string value
            </summary>
        </member>
        <member name="F:Core.Models.Settings.MetadataFieldType.Decimal">
            <summary>
            Decimal number value
            </summary>
        </member>
        <member name="F:Core.Models.Settings.MetadataFieldType.Date">
            <summary>
            Date value
            </summary>
        </member>
        <member name="F:Core.Models.Settings.MetadataFieldType.Integer">
            <summary>
            Integer number value
            </summary>
        </member>
        <member name="P:Core.Models.Settings.PackageSettings.MetadataDefinition">
            <summary>
            Configurable metadata field definitions for packages
            </summary>
        </member>
        <member name="M:Core.Models.Settings.PackageSettings.ValidateMetadataDefinitions">
            <summary>
            Validates the metadata definitions for consistency and correctness
            </summary>
            <returns>List of validation error messages, empty if valid</returns>
        </member>
        <member name="T:Core.Services.IExternalCommandService">
            <summary>
            Service for executing external commands
            </summary>
        </member>
        <member name="M:Core.Services.IExternalCommandService.ExecuteCommandsAsync(Core.Enums.CommandTriggerType,Core.Enums.ObjectType,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes all commands that match the specified trigger type and object type
            </summary>
            <param name="triggerType">The trigger type to match</param>
            <param name="objectType">The object type to match</param>
            <param name="objectId">The ID of the object that triggered the command</param>
            <param name="parameters">Additional parameters for command execution</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the execution operation</returns>
        </member>
        <member name="M:Core.Services.IExternalCommandService.ExecuteCommandAsync(System.String,System.Guid,System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes a specific command by ID
            </summary>
            <param name="commandId">The command ID to execute</param>
            <param name="objectId">The ID of the object</param>
            <param name="parameters">Additional parameters for command execution</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the execution operation</returns>
        </member>
        <member name="M:Core.Services.IExternalCommandService.ExecuteBatchCommandAsync(System.String,System.Guid[],System.Collections.Generic.Dictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
            Executes a batch command for multiple objects
            </summary>
            <param name="commandId">The command ID to execute</param>
            <param name="objectIds">The IDs of the objects</param>
            <param name="parameters">Additional parameters for command execution</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the execution operation</returns>
        </member>
        <member name="M:Core.Services.IExternalCommandService.GetManualCommandsAsync(Core.Enums.ObjectType,System.String)">
            <summary>
            Gets all commands that can be manually triggered for the specified object type
            </summary>
            <param name="objectType">The object type</param>
            <param name="screenName">The screen name where the command will be triggered</param>
            <returns>List of manual commands</returns>
        </member>
        <member name="M:Core.Services.IExternalCommandService.ValidateCommandAsync(Core.Models.Settings.ExternalCommand)">
            <summary>
            Validates a command configuration
            </summary>
            <param name="command">The command to validate</param>
            <returns>List of validation errors (empty if valid)</returns>
        </member>
        <member name="T:Core.Services.IFileDeliveryService">
            <summary>
            Service for delivering files to various destinations (local, network, FTP, SFTP)
            </summary>
        </member>
        <member name="M:Core.Services.IFileDeliveryService.DeliverFileAsync(System.String,System.String,Core.Models.Settings.CommandDestination,System.Threading.CancellationToken)">
            <summary>
            Delivers a file to the specified destination
            </summary>
            <param name="filePath">Path to the file to deliver</param>
            <param name="fileName">Name of the file at destination</param>
            <param name="destination">Destination configuration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>Task representing the delivery operation</returns>
        </member>
        <member name="M:Core.Services.IFileDeliveryService.TestConnectionAsync(Core.Models.Settings.CommandDestination,System.Threading.CancellationToken)">
            <summary>
            Tests connectivity to a destination
            </summary>
            <param name="destination">Destination configuration</param>
            <param name="cancellationToken">Cancellation token</param>
            <returns>True if connection successful, false otherwise</returns>
        </member>
        <member name="M:Core.Services.IPickListCancelService.CancelPickListAsync(System.Int32,Core.Models.SessionInfo)">
            <summary>
            Cancels a pick list and creates transfer to move items back to cancel bin location
            </summary>
            <param name="absEntry">Pick list AbsEntry to cancel</param> 
            <param name="sessionInfo">User session information</param>
            <returns>Cancellation response with transfer information</returns>
        </member>
        <member name="M:Core.Services.IPickListPackageService.AddPackageAsync(Core.DTOs.PickList.PickListAddPackageRequest,Core.Models.SessionInfo)">
            <summary>
            Adds an entire package to a pick list, creating pick list entries for all package contents
            </summary>
        </member>
        <member name="M:Core.Services.IPickListPackageService.ProcessPickListClosureAsync(System.Int32,Core.DTOs.PickList.PickListClosureInfo,System.Guid)">
            <summary>
            Processes pick list closure by clearing commitments and optionally processing package movements
            </summary>
        </member>
    </members>
</doc>
